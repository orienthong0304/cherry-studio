---
description: Frontend Tech
globs: 
---

# Frontend Architecture and Development Guidelines

## 技术栈
- 框架：Electron + React
- 语言：TypeScript
- 状态管理：Zustand
- UI 框架：Ant Design
- 构建工具：Vite
- 包管理：Yarn

## 项目结构
```
src/
  ├── main/              # Electron 主进程
  │   ├── services/      # 主进程服务
  │   ├── utils/         # 工具函数
  │   └── config.ts      # 配置文件
  │
  ├── renderer/          # 渲染进程
  │   ├── components/    # 通用组件
  │   ├── pages/         # 页面组件
  │   ├── hooks/         # 自定义 Hooks
  │   ├── store/         # 状态管理
  │   └── utils/         # 工具函数
  │
  └── preload/           # 预加载脚本
```

## 页面结构
1. 普通用户界面
   ```
   /
   ├── home             # 首页
   ├── chat            # AI 对话
   ├── settings        # 用户设置
   └── profile         # 个人信息
   ```

2. 管理员界面
   ```
   /admin
   ├── dashboard       # 控制台
   ├── users          # 用户管理
   ├── ai-services    # AI 服务管理
   ├── settings       # 系统设置
   └── logs          # 使用日志
   ```

## 组件规范
1. 通用组件
   - Layout 布局组件
   - Header 头部组件
   - Sidebar 侧边栏组件
   - Table 表格组件
   - Form 表单组件
   - Modal 弹窗组件
   - Card 卡片组件

2. 业务组件
   - ChatWindow 对话窗口
   - ServiceCard 服务卡片
   - UserAvatar 用户头像
   - SettingsPanel 设置面板
   - LogViewer 日志查看器

## 状态管理
1. 全局状态
   ```typescript
   interface GlobalState {
     user: UserInfo;
     settings: AppSettings;
     theme: ThemeConfig;
     services: AIService[];
   }
   ```

2. 页面状态
   - 使用 React hooks 管理页面级状态
   - 复杂页面可使用 Zustand 创建页面级 store

## 主进程通信
1. IPC 通道
   - user: 用户相关操作
   - ai: AI 服务调用
   - system: 系统操作
   - file: 文件操作

2. 通信规范
   ```typescript
   interface IPCRequest {
     type: string;
     payload: any;
     timestamp: number;
   }

   interface IPCResponse {
     success: boolean;
     data?: any;
     error?: string;
   }
   ```

## 开发规范
1. 命名规范
   - 组件：PascalCase
   - 文件：kebab-case
   - 变量/函数：camelCase
   - 常量：UPPER_CASE

2. 代码风格
   - 使用 ESLint + Prettier
   - 遵循 TypeScript 最佳实践
   - 使用 Functional Components
   - 优先使用 Hooks

3. 性能优化
   - 合理使用 React.memo
   - 使用 useMemo 和 useCallback
   - 实现虚拟列表
   - 图片懒加载

4. 错误处理
   - 全局错误边界
   - 统一的错误提示
   - 错误日志记录

## 主题系统
1. 主题配置
   ```typescript
   interface ThemeConfig {
     mode: 'light' | 'dark';
     primary: string;
     secondary: string;
     background: string;
     text: string;
   }
   ```

2. 响应式设计
   - 桌面端优先
   - 支持不同分辨率
   - 弹性布局

## 安全考虑
1. 数据安全
   - 敏感信息加密存储
   - 清除会话数据
   - XSS 防护

2. 权限控制
   - 路由级别权限
   - 组件级别权限
   - 操作级别权限
